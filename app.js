// to import the Express package
const express = require('express');
// to import moongoose for MongoDB interactions
const mongoose = require('mongoose');

const Thing = require('./models/Thing');

// to create an Express application
const app = express();

// connection to a MongoDB database using mongoose
mongoose.connect('mongodb+srv://delery06_db_user:S0KpvTWhA85TMsxB@cluster0.nowhbfh.mongodb.net/test?retryWrites=true&w=majority',
  { useNewUrlParser: true,
    useUnifiedTopology: true })
  .then(() => console.log('Connexion à MongoDB réussie !'))
  .catch(() => console.log('Connexion à MongoDB échouée !'));

// intercepting all incoming requests with a JSON payload
app.use(express.json());

// to handle CORS errors and allow requests from any origin
app.use((req, res, next) => {
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content, Accept, Content-Type, Authorization');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, PATCH, OPTIONS');
  next();
});

// to define a simple route that handles POST requests to /api/stuff
app.post('/api/stuff', (req, res, next) => {
    // to remove the _id generated by MongoDB
    delete req.body._id;
    const thing = new Thing({
      ...req.body
    });
    thing.save()
      .then(() => res.status(201).json({ message: 'Objet enregistré !'}))
      .catch(error => res.status(400).json({ error }));
    });

// to modify an existing element in MongoDB
app.put('/api/stuff/:id', (req, res, next) => {
    Thing.updateOne({ _id: req.params.id }, { ...req.body, _id: req.params.id })
      .then(() => res.status(200).json({ message: 'Objet modifié !'}))
      .catch(error => res.status(400).json({ error }));
  });

  // to delete an element from MongoDB
app.delete('/api/stuff/:id', (req, res, next) => {
Thing.deleteOne({ _id: req.params.id })
    .then(() => res.status(200).json({ message: 'Objet supprimé !'}))
    .catch(error => res.status(400).json({ error }));
});

// to get a single element by id from MongoDB
app.get('/api/stuff/:id', (req, res, next) => {
  Thing.findOne({ _id: req.params.id })
    .then(thing => res.status(200).json(thing))
    .catch(error => res.status(404).json({ error }));
});

// to define a simple route that handles GET requests to /api/stuff
app.get('/api/stuff', (req, res, next) => {
  Thing.find()
    .then(things => res.status(200).json(things))
    .catch(error => res.status(400).json({ error }));
}); 

// to export this app to access it from the other files and specially the server Node
module.exports = app;